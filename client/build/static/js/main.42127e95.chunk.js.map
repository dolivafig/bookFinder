{"version":3,"sources":["utils/auth.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","useMutation","save","error","handleFormSubmit","event","a","preventDefault","fetch","response","console","log","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","key","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","userData","setUserData","data","useQuery","userDataLength","Object","keys","update","cache","deleteBook","writeQuery","query","me","user","getUserData","handleDeleteBook","updatedUser","fluid","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","props","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","dotenv","config","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42127e95.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($authors: String!, $description: String!, $bookId: ID!, $image: String!) {\n    saveBook(authors: $authors, description: $description, bookId:$bookId, image: $image) {\n      _id\n      authors\n      description\n      bookId\n      image\n  }\n}\n  `;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: ID!) {\n    removeBook(bookId: $bookId) {\n    bookId\n    }\n  }\n  `; ","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  Row\n} from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n  \n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  \n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () =>  saveBookIds(savedBookIds);\n  });\n\n  const [save, { error }] = useMutation(SAVE_BOOK);\n  \n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\nconsole.log(response);\n      if (!response.ok) {\n        throw new Error(error);\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\nconsole.log(bookToSave);\n\n    try {\n      const response = await save({\n        variables: {\n          bookToSave\n        },\n      });\nconsole.log(response);\n      if (!response.ok) {\n        console.error(error);\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <div className='text-light bg-dark pt-5'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </Container>\n      </div>\n\n      <Container>\n        <h2 className='pt-5'>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <Row>\n          {searchedBooks.map((book) => {\n            return (\n              <Col key={book.bookId} md=\"4\">\n                <Card border='dark'>\n                  {book.image ? (\n                    <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                  ) : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className='small'>Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button\n                        disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                        className='btn-block btn-info'\n                        onClick={() => handleSaveBook(book.bookId)}>\n                        {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                          ? 'This book has already been saved!'\n                          : 'Save this Book!'}\n                      </Button>\n                    )}\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n      bookCount\n      savedBooks\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport {\n  Container,\n  Card,\n  Button,\n  Row,\n  Col\n} from 'react-bootstrap';\n\n// import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { removeBookId } from '../utils/localStorage';\nimport { GET_ME } from '../utils/queries';\nimport { useQuery } from '@apollo/client';\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n  const { data } = useQuery(GET_ME);\n  const userDataLength = Object.keys(userData).length;\n  // const bookCount = data.me.bookCount;\n  // console.log(bookCount);\n  console.log(data);\n  console.log(Object.keys(userData));\n    const [deleteBook] = useMutation(REMOVE_BOOK, {\n      update(cache, {data: {deleteBook}}) {\n        try{\n          cache.writeQuery({\n            query: GET_ME,\n            data: {me: deleteBook},\n          });\n        } catch(e) {\n          console.error(e);\n        }\n      },\n    });\n\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n        const response = data;\n        if (!response.ok) {\n                  throw new Error('something went wrong!');\n                }\n        \n                const user = await response.json();\n                setUserData(user);\n              } catch (err) {\n                console.error(err);\n              }\n            };\n        \n            getUserData(data);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook({ bookId, token });\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const updatedUser = await response.json();\n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <div fluid className='text-light bg-dark p-5'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </div>\n      <Container>\n        <h2 className='pt-5'>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <Row>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Col md=\"4\">\n                <Card key={book.bookId} border='dark'>\n                  {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className='small'>Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                      Delete this Book!\n                    </Button>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n// import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  \n  const [addUser] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(userFormData);\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      console.log(userFormData);\n      const data = await addUser({\n        \n        variables: { ...userFormData },\n      });\n\n      console.log(data);\n      Auth.login(data.data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  \n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = (props) => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [login] = useMutation(LOGIN_USER);\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const data = await login({\n        variables: { ...userFormData },\n      });\n      console.log(Auth);\n      console.log({data});\n      Auth.login(data.data.login.token);\n    } catch (error) {\n      console.error(error);\n      setShowAlert(true);\n      throw new Error('something went wrong!');\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar' className='d-flex flex-row-reverse'>\n            <Nav className='ml-auto d-flex'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport {setContext } from '@apollo/client/link/context';\n\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\nimport dotenv from 'dotenv';\ndotenv.config();\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  console.log({headers});\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}